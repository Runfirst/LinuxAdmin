#iptables is just a command-line interface to the package filtering functionality in netfilter.

#The packet filtering mechanism provided by iptables is organized into three different kinds of structures: talbes, chains and targets.
#tables: filter, nat, mangle, raw
    filter: This is the default and perhaps the most widely used tables. It is used to make decisions about whether a packet should be allowed to reach its destination.
    mangle: This table allows your to alter packet headers in various way, such as changing TTL values.
    nat: This table allows you to route packets to different hosts on NAT networks by changing the source and destination address of packaets. It's often used to allow access to services that can't be accessed directly, because they're on a NAT network.
    raw: iptables is a stateful firewall, which means that packets are inspected with respect to their "state". (For example, a packet could be part of a new connection, or it could be part of an existing connection.) The raw table allows you to work with packets before the kernel starts tracking it state.

#tables priority from high to low: raw->mangle->nat->filter 

#chains: INPUT, OUTPUT, FORWARD, PREROUTING, POSTROUTING
    PREOUTING: Rules in this chain apply to packets as they just arrive on the network interface. This chain is present in the nat, mangle and raw tables.
    POSTROUTING: The rules in this chain apply to packets as they just leave on the network interface. 

#Tables present with chain:
    raw table: chains PREROUTING, OUTPUT
    mangle table: chains PREROUTING, POSTROUTING, INPUT, OUTPUT, FORWARD
    nat table: chains PREROUTING, POSTROUTING, OUTPUT, INPUT
    filter table: chains INPUT, FORWARD, OUTPUT 

#targets: ACCEPT, DROP, REJECT
    >1. Difference between DROP and REJECT
        DROP: when we use the DROP command, it will not forward the packet or answer it. But, simply drops the packet silently. And no indication is sent to the client or server.
        REJECT: the REJECT command sends an error message back to the source indicating a connection failure.


#iptables command
$iptables [-t table] SUBCOMMAND chain [-m matchname [per-match-options]] -j targetname [per-target-options]
    -t table : raw, mangle,nat, filter (default)

    SUBCOMMAND
        >1. Configure chain
            -N: new, customize a new chain
            -X: delete, delete the customization chain (should be enmpy)
            -P: Policy, set the default policy, ACCEPT or DROP
            -E: rename the customization chain name; If the customization chain was quoted, the chain can't be deleted or renamed.

        >2. check chains 
            -L: list, list all rules in the specified chain
            -n: numberic, display addresses and ports in numberic 
            -v: verbose, details informations
            -vv: more details 
            -x: exactly
            --line-numbers: Display the serial number of the rules
            --vnL: common combination
            --vvnxl --line-numbers: common combination
        >3. manage rules
            -A: append, add the rule to the last one
            -I: insert, insert the rule to chains, the default is the first one.
            -D: delete, delete the rule with numberic 
            -R: replace, replace the specific rule with numberic




#Stop the default firewalld
$systemctl status firewalld
$systemctl start firewalld
$iptables -vnl 
$systemctl stop firewalld

#modify the default policy
$iptables -A INPUT DROP


#Blocking IPs 
$iptables -t filter -A INPUT -s 59.45.175.62 -j REJECT
$iptables -A INPUT -s 59.45.175.62 -j REJECT
#Blocking IP ranges by using the CIDR (Classless Inter-Domain Routing) notation
$iptable -A INPUT -s 59.45.175.0/24 -j REJECT
#Blocking output traffic to an IP, should use the OUTPUT chain and the -d flag to specify the destination IP 
$iptables -A OUTPUT -d 31.13.78.35 -j DROP


#Listing rules 
$iptables -L 
#Listing rules with the line numbers 
$iptables -L --line-numbers 
#iptables also tries to be helpful by doing reverse DNS lookups on the IPs.ToDisable this, you can use the -n switch:
$iptables -L -n --line-numbers 


#Deleting rules or rules through their line numbers.
$iptables -D INPUT -s 221.194.47.0/24 -j REJECT 
$iptables -D INPUT 2
#If you're deleting a bunch of rules, you should first delete the ones with highest line numbers.
$iptables -D INPUT 12
$iptables -D INPUT 9
#Remove all rules in a particular chain
$iptables -F INPUT 


#Inserting and replacing rules 
#Insert a new rule at the first line 
$iptables -I INPUT -s 59.45.175.10 -j ACCEPT
#replace rules with the -R switch 
$iptables -R INPUT 2 -s 59.45.175.10 -j ACCEPT


#Protocols and modules
#block all incoming TCP traffic. Need to specify the protocol with -p 
$iptables -A INPUT -p tcp -j DROP
#block SSH access for an IP range; load the tcp module with -m, check the SSH destination port by using --dport
$iptables -A INPUT -p tcp -m tcp --dport 22 -s 59.45.175.0/24 -j DROP
#block SSH and VNC (multiport) access for the IP range, load the multiport module
$iptables -A INPUT -p tcp -m multiport --dport 22,5901 -s 59.45.175.0/24 -j DROP


#The connection tracking module 
#The packets from your system do reach the server. However, the packets that the server sends to your system get rejected.
#What we really need here is a way to tell iptables to not touch packets that are part of an existing connection. Fortunately, iptables is a stateful firewall, and it provides a connection tracking module named "conntrack" for this purpose.
#Connections tracked by this module will be in one of the following states:
    >NEW : This state represents the very first packet of a connection.
    >ESTABLISHED : This state is used for packets that are part of an existing connection.
    >RELATED : This state is used for connections that are related to another ESTALISHED CONNECTION.
    >INVALID : This state means the packet doesn't have a proper state.
    >UNTRACKED: Any packets exempted from connection tracking in the raw table with the NOTRACK target end up in this state.
    >DNAT : 







